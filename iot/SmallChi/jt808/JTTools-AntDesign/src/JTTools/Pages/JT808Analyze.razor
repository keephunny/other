@page "/jt808"

@using JT808.Protocol;
@using JT808.Protocol.Extensions;
@using JT808.Protocol.Exceptions;
@using JTTools.Configs;
@using System.IO;
@using System.Reflection;
@using System.Text;
@using System.Text.Encodings.Web;
@using System.Text.Unicode;
@using JT808.Protocol.Interfaces;
@inject IJT808Config  config
@inject JT808_JT1078_Config  jT808_JT1078_Config
@inject JT808_SuBiao_Config  jT808_SuBiao_Config
@inject JT808_Streamax_Config  jT808_Streamax_Config
@inject JT808_YueBiao_Config  jT808_YueBiao_Config
@using OneOf;

<Space Direction="DirectionVHType.Vertical" Style="width:100%">
    <SpaceItem>
        <Alert Type="@AlertType.Warning" ShowIcon="true" Closable Message="小技巧" Description="如有分包或多包，请换行(回车)区分。" />
    </SpaceItem>
    <SpaceItem>
        <Select TItemValue="string" TItem="string" DefaultValue="@("JT808")" @bind-Value="@protocolType" OnSelectedItemChanged="OnSelectProtocolType">
            <SelectOptions>
                <SelectOption TItemValue="string" TItem="string" Label="国标(通过包自动识别版本号)" Value="@("JT808")" />
                <SelectOption TItemValue="string" TItem="string" Label="国标扩展JT1078" Value="@("JT808_JT1078")" />
                <SelectOption TItemValue="string" TItem="string" Label="国标扩展主动安全(苏标)" Value="@("JT808_SuBiao")" />
                <SelectOption TItemValue="string" TItem="string" Label="国标扩展主动安全(粤标)" Value="@("JT808_YueBiao")" />
                <SelectOption TItemValue="string" TItem="string" Label="公交扩展协议(锐明)" Value="@("JT808_JTRM")" />
                <SelectOption TItemValue="string" TItem="string" Label="国标(强制使用2013版本解析)" Value="@("JT2013Force")" />
                <SelectOption TItemValue="string" TItem="string" Label="国标扩展私有协议" Value="@("JTPrivate")" />
            </SelectOptions>
        </Select>
    </SpaceItem>
    @if (protocolType == "JTPrivate")
    {
        <SpaceItem>
            <Alert Type="@AlertType.Info" ShowIcon="true" Message="前置条件">
                <div>1.必须通过【https://github.com/SmallChi/JT808】实现的扩展库才可以支持</div>
                <div>2.上传的文件只在浏览器本地，服务器不会收集任何私有协议库</div>
            </Alert>
        </SpaceItem>
        <InputFile OnChange="@LoadFiles" />
        @*目前组件不支持 <Upload Name="files" Action="" OnSingleCompleted="OnJTPrivateSingleCompleted">
                <Button Icon="upload">
                    <span>上传私有协议库(.dll)</span>
                </Button>
            </Upload>*@
    }
    <SpaceItem>
        <TextArea AllowClear="true" Rows="4" @bind-Value="@HexData" OnPressEnter="OnAreaTextPressEnter" />
    </SpaceItem>
    <SpaceItem>
        <Button Type="primary" @onclick="Query">分析</Button>
    </SpaceItem>
    @if (isOpen)
    {
        <SpaceItem>
            <Alert Type="@AlertType.Error" Description="@ErrerMessage" Closable AfterClose="OnDismiss" />
        </SpaceItem>
    }
    <SpaceItem>
        <div style="min-height: 350px">
            @if (JT808HeaderPackages != null)
            {
                <Collapse DefaultActiveKey="@(new[]{"1"})">
                    @for (int i = 0; i < JT808HeaderPackages.Count; i++)
                    {
                        var item = JT808HeaderPackages[i];
                        var index = i + 1;
                        var header = $"序号:{index}";
                        <Panel Key="@index.ToString()">
                            <HeaderTemplate>
                                @header
                                <Tag Color="orange">终端号：@item.Header.TerminalPhoneNo</Tag>
                                <Tag Color="volcano">消息Id：@("0x" + item.Header.MsgId.ToString("X2"))</Tag>
                                <Tag Color="purple">消息流水号：@item.Header.MsgNum</Tag>
                                <Tag Color="pink">设备版本号：@(((JT808.Protocol.Enums.JT808Version)item.Header.ProtocolVersion).ToString())</Tag>
                                <Tag Color="red">总分包数：@item.Header.PackgeCount</Tag>
                                <Tag Color="blue">当前页：@item.Header.PackageIndex</Tag>
                                <Tag Color="cyan">数据体长度：@item.Header.MessageBodyProperty.DataLength</Tag>
                                <Tag Color="geekblue">是否加密：@item.Header.MessageBodyProperty.Encrypt.ToString()</Tag>
                            </HeaderTemplate>
                            <ChildContent>
                                <pre>@item.Bodies.ToHexString()</pre>
                            </ChildContent>
                        </Panel>
                    }
                    <Panel Header="合并数据体" Key="9999">
                        <pre>@Json</pre>
                    </Panel>
                </Collapse>
            }
            @if (JT808Packages != null)
            {
                <Collapse DefaultActiveKey="@(new[]{"1"})">
                    @for (int i = 0; i < JT808Packages.Count; i++)
                    {
                        var item = JT808Packages[i];
                        var index = i + 1;
                        var header = $"序号:{index}";
                        <Panel Header="@header" Key="@index.ToString()">
                            <pre>@item.Json</pre>
                        </Panel>
                    }
                </Collapse>
            }
        </div>
    </SpaceItem>
</Space>

@code {

    private JT808Serializer Serializer;

    private JT808Serializer JTRM_Serializer;

    private JT808Serializer JTSuBiao_Serializer;

    private JT808Serializer JTYueBiao_Serializer;

    private JT808Serializer JT1078Serializer;

    private JT808Serializer JTPrivateSerializer;

    string protocolType = "JT808";

    private List<JT808HeaderPackage> JT808HeaderPackages;

    private List<JT808PackageInfo> JT808Packages;

    private IJT808Config JT808PrivateConfig;

    private string HexData = HexDataTmp;

    private static string HexDataTmp = "7E 02 00 00 26 12 34 56 78 90 12 00 7D 02 00 00 00 01 00 00 00 02 00 BA 7F 0E 07 E4 F1 1C 00 28 00 3C 00 00 18 10 15 10 10 10 01 04 00 00 00 64 02 02 00 7D 01 13 7E";

    private static string Hex2013ForceTmp = "7e0102400c01003000068109024a3130303330303030363831857e";

    private static string HexSubDataTmpn7E1205203804066657506200EC000200020120121900163320121900360700000000000000000001010F0CE4CD0120121900002220121900163300000000000000000001010C6F9E7B5D7E";

    private static string HexYueBiaoDataTmp = "7E0200405C01000000000012345678913CC400000000008C0003015198CF06C158C5000801F200E52203151206110104000716E30302000014040000000015040000000016040000000017020000180300000025040000000030011F310117EF0D49249200000049249011000003DE7E\n7E1205203804066657506200EC000200020120121900163320121900360700000000000000000001010F0CE4CD0120121900002220121900163300000000000000000001010C6F9E7B5D7E";

    private string ErrerMessage;

    private bool isOpen = false;

    void OnDismiss()
    {
        isOpen = !isOpen;
    }

    private void OnSelectProtocolType(string value)
    {
        if ("JT808_JT1078" == protocolType)
        {
            HexData = HexSubDataTmp;
        }
        else if ("JT808_YueBiao" == protocolType)
        {
            HexData = HexYueBiaoDataTmp;
        }
        else if ("JT2013Force" == protocolType)
        {
            HexData = Hex2013ForceTmp;
        }
        else
        {
            HexData = HexDataTmp;
        }
        protocolType = value;
    }

    private void OnAreaTextPressEnter(KeyboardEventArgs eventArgs)
    {
        HexData += "\n";
    }

    private async void LoadFiles(InputFileChangeEventArgs e)
    {
        try
        {
            using var memoryStream = new MemoryStream();
            Stream fs = e.File.OpenReadStream();
            await fs.CopyToAsync(memoryStream);
            Assembly assembly = Assembly.Load(memoryStream.ToArray());
            JT808PrivateConfig.Register(assembly);
            JTPrivateSerializer = new JT808Serializer(JT808PrivateConfig);
        }
        catch (Exception ex)
        {
            ErrerMessage = ex.StackTrace;
        }
    }

    protected override void OnInitialized()
    {
        config.SkipCRCCode=true;
        config.SkipCarDVRCRCCode=true;
        Serializer = config.GetSerializer();
        JT1078Serializer = jT808_JT1078_Config.GetSerializer();
        JTSuBiao_Serializer = jT808_SuBiao_Config.GetSerializer();
        JTRM_Serializer = jT808_Streamax_Config.GetSerializer();
        JTYueBiao_Serializer = jT808_YueBiao_Config.GetSerializer();
        JT808PrivateConfig = new LocalLodingConfig();
    }

    string Json = "";

    //暂不支持
    //private void OnJTPrivateSingleCompleted(AntDesign.UploadInfo uploadInfo)
    //{
    //    try
    //    {
    //        byte[] fs = File.ReadAllBytes(uploadInfo.File.ObjectURL);
    //        if (uploadInfo.FileList.Count > 1)
    //        {
    //            uploadInfo.FileList.RemoveAt(0);
    //        }
    //    }
    //    catch (Exception ex)
    //    {

    //    }

    //}

    private void Query()
    {
        try
        {
            isOpen = false;
            JT808HeaderPackages = null;
            JT808Packages = null;
            Json = "";
            var hexs = HexData.Split("\n", StringSplitOptions.RemoveEmptyEntries);
            if (hexs.Length > 0)
            {
                SortedList<int, JT808HeaderPackage> sort = new SortedList<int, JT808HeaderPackage>();
                JT808Packages = new List<JT808PackageInfo>();
                var total = 0;
                for (var i = 0; i < hexs.Length; i++)
                {
                    var data = hexs[i].ToHexBytes();
                    var headerPackage = Serializer.HeaderDeserialize(data);
                    //处理分包
                    if (headerPackage.Header.MessageBodyProperty.IsPackage)
                    {
                        total = headerPackage.Header.PackgeCount;
                        sort.Add(headerPackage.Header.PackageIndex, headerPackage);
                    }
                    else
                    {
                        switch (protocolType)
                        {
                            case "JT808":
                                JT808Packages.Add(new JT808PackageInfo { Order = i, Json = Serializer.Analyze(data, options: JTJsonWriterOptions.Instance) });
                                break;
                            case "JT808_JT1078":
                                JT808Packages.Add(new JT808PackageInfo { Order = i, Json = JT1078Serializer.Analyze(data, options: JTJsonWriterOptions.Instance) });
                                break;
                            case "JT808_SuBiao":
                                JT808Packages.Add(new JT808PackageInfo { Order = i, Json = JTSuBiao_Serializer.Analyze(data, options: JTJsonWriterOptions.Instance) });
                                break;
                             case "JT808_YueBiao":
                                JT808Packages.Add(new JT808PackageInfo { Order = i, Json = JTYueBiao_Serializer.Analyze(data, options: JTJsonWriterOptions.Instance) });
                                break;
                            case "JT808_JTRM":
                                JT808Packages.Add(new JT808PackageInfo { Order = i, Json = JTRM_Serializer.Analyze(data, options: JTJsonWriterOptions.Instance) });
                                break;
                            case "JT2013Force":
                                JT808Packages.Add(new JT808PackageInfo { Order = i, Json = Serializer.Analyze(data, JT808.Protocol.Enums.JT808Version.JTT2013Force, options: JTJsonWriterOptions.Instance) });
                                break;
                            case "JTPrivate":
                                if (JTPrivateSerializer != null)
                                {
                                    JT808Packages.Add(new JT808PackageInfo { Order = i, Json = JTPrivateSerializer.Analyze(data, options: JTJsonWriterOptions.Instance) });
                                }
                                break;
                        }
                    }
                }
                if (sort.Count > 0)
                {
                    if (sort.Count == total)
                    {
                        List<byte> bodies = new List<byte>();
                        ushort msgid = 0;
                        foreach (var item in sort)
                        {
                            msgid = item.Value.Header.MsgId;
                            bodies = bodies.Concat(item.Value.Bodies).ToList();
                        }
                        JT808HeaderPackages = sort.Select(s => s.Value).ToList();
                        switch (protocolType)
                        {
                            case "JT808":
                                Json = Serializer.Analyze(msgid, bodies.ToArray(), options: JTJsonWriterOptions.Instance);
                                break;
                            case "JT808_JT1078":
                                Json = JT1078Serializer.Analyze(msgid, bodies.ToArray(), options: JTJsonWriterOptions.Instance);
                                break;
                            case "JT808_SuBiao":
                                Json = JTSuBiao_Serializer.Analyze(msgid, bodies.ToArray(), options: JTJsonWriterOptions.Instance);
                                break;
                            case "JT808_YueBiao":
                                Json = JTYueBiao_Serializer.Analyze(msgid, bodies.ToArray(), options: JTJsonWriterOptions.Instance);
                                break;
                            case "JT808_JTRM":
                                Json = JTRM_Serializer.Analyze(msgid, bodies.ToArray(), options: JTJsonWriterOptions.Instance);
                                break;
                            case "JT2013Force":
                                Json = Serializer.Analyze(msgid, bodies.ToArray(), JT808.Protocol.Enums.JT808Version.JTT2013Force, options: JTJsonWriterOptions.Instance);
                                break;
                            case "JTPrivate":
                                if (JTPrivateSerializer != null)
                                {
                                    Json = JTPrivateSerializer.Analyze(msgid, bodies.ToArray(), options: JTJsonWriterOptions.Instance);
                                }
                                break;
                        }
                    }
                    else
                    {
                        Json = "包数不匹配,请确认清楚！";
                    }
                }
            }
        }
        catch (JT808Exception ex)
        {
            isOpen = !isOpen;
            ErrerMessage = ex.Message;
        }
        catch (Exception ex)
        {
            isOpen = !isOpen;
            ErrerMessage = ex.StackTrace;
        }
    }

    public class LocalLodingConfig : GlobalConfigBase
    {
        public override string ConfigId { get; protected set; } = "LocalConfig";
    }

    public class JT808PackageInfo
    {
        public int Order { get; set; }

        public string Json { get; set; }
    }
}
